from contextlib import suppress

from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text, Command
from aiogram.utils.exceptions import MessageNotModified

from config import admin_id, manager
from sql_lite import add_id, user_id, product, list_add, list_take_orders, list_take
from keyboard import keyboard, keyboard1, keyboard2, keyboard3, keyboard5, keyboard7

from main import dp, bot

user_data = dict()


@dp.message_handler(Command('start'))
async def start_info(message: Message):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ """
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç, —è Doner Master bot.ü•ô\n'
                              '–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É —á–∞—Ç–∞. \n')
    await message.answer(text='Bot –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É! üëã', reply_markup=keyboard)
    global info
    info = list()
    print(message.chat.id)
    await add_id(message.chat.id)
    info.append(message.chat.id)


@dp.message_handler(Text(equals=['–ü–æ–º–æ—â—åüìí']))
async def get_help(message: Message):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ö–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â—å """
    await message.answer(
        text='–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ ‚è∞ ,–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É:+7 (3822) 33‚Äí10‚Äí00\n'
             '–¢–∞–∫–∂–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –Ω–∞—à–∏–º –º–æ–±–∏–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:Doner Master\n')


@dp.message_handler(Text(equals=['–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üç¥']))
async def get_place_list(message: Message):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ö–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞ """
    await message.answer(text='–ì–¥–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?üç¥\n')
    await message.answer(text='–ê–¥—Ä–µ—Å–∞ —Ç–æ—á–µ–∫üëá', reply_markup=keyboard1)


@dp.callback_query_handler(text_contains='buy_')
async def get_products_category(call: CallbackQuery):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é """
    await call.answer(cache_time=2)
    t = call['data']
    place = t[t.find('–¢'):]
    info.append(place)
    await call.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É üéâ{place}\n', reply_markup=keyboard5)
    await call.message.answer(f'–ü—Ä–æ–¥—É–∫—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üëá\n', reply_markup=keyboard2)
    await call.message.edit_reply_markup(reply_markup=None)


@dp.message_handler(Text(equals=['–ú–µ–Ω—éüìï']))
async def get_products_type(message: Message):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é """
    global ph
    try:
        ph.clear()
        d.clear()
    except:
        pass
    await message.answer(f'–¢–æ—á–∫–∞:{info[1]} \n', reply_markup=keyboard5)
    await message.answer('–ü—Ä–æ–¥—É–∫—Ç—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏üëá\n', reply_markup=keyboard2)


@dp.callback_query_handler(text_contains='Cancel')
async def cancel(call: CallbackQuery):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã """
    await call.answer('–û—Ç–º–µ–Ω–∞', show_alert=True)
    await call.message.edit_reply_markup(reply_markup=None)


@dp.callback_query_handler(text_contains='_buy', state=None)
async def get_product(call: CallbackQuery):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ """
    global ph, d
    ph = list()
    d = list()
    await call.answer(cache_time=5)
    t = call['data']
    product_name = t[t.find('p') + 1:]
    m = await product(f'{product_name}')
    c = 0
    for i in range(int(len(m) / 4)):
        try:
            keyboard6 = InlineKeyboardMarkup()
            keyboard6.add(InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data=f"100{c}"))
            await call.message.answer_photo(open(f'img/{m[c]}', 'rb'))
            await call.message.answer(f'üç¥{m[c + 1]}\n')
            await call.message.answer(f'{m[c + 2]}\n'
                                      f'–¶–µ–Ω–∞:{m[c + 3]}‚ÇΩ\n', reply_markup=keyboard6)
            d.append(m[c + 1])
            ph.append(m[c])
            ph.append(m[c + 3])
            c += 4
        except FileNotFoundError:
            pass
    await call.message.edit_reply_markup(reply_markup=None)


@dp.callback_query_handler(text_contains='100')
async def how_many_product(call: CallbackQuery):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ """
    global info
    s = call['data'].replace('100', '')
    k = d[int(int(s) / 4)]
    p = ph[int(int(s) / 2)]
    t = ph[int(int(s) / 2) + 1]
    info.append(k)
    info.append(t)
    await call.message.answer_photo(open(f'img/{p}', 'rb'))
    await call.message.answer(f"{k}\n"
                              f"–¶–µ–Ω–∞: {t}‚ÇΩ\n")
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: 1", reply_markup=keyboard3)
    await call.message.edit_reply_markup(reply_markup=None)


@dp.callback_query_handler(Text(startswith="num_"))
async def callbacks_num(call: CallbackQuery):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ """
    user_value = user_data.get(call.from_user.id, 1)
    action = call.data.split("_")[1]
    if action == "incr":
        user_data[call.from_user.id] = user_value + 1
        await update_num_text(call.message, user_value + 1)
    elif action == "decr":
        user_data[call.from_user.id] = user_value - 1
        if user_data[call.from_user.id] < 1:
            user_data[call.from_user.id] = 1
        await update_num_text(call.message, user_value - 1)
    elif action == "finish":
        await call.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
        info.append(user_value)
        user_data[info[0]] = 1
    await call.answer()


async def update_num_text(message: Message, new_value: int):
    """"   –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è """
    with suppress(MessageNotModified):
        if new_value < 1:
            new_value = 1
        await message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_value}", reply_markup=keyboard3)


@dp.message_handler(Text(equals=['–ö–æ—Ä–∑–∏–Ω–∞üõí']))
async def basket(message: Message):
    """"   –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã """
    global info, v
    if len(info[2:]) % 3 != 0 or type(info[-2]) != int:
        info = await basket_cleaning(info)
    if len(info) < 5:
        await message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=keyboard5)
    else:
        v = list()
        keyboard9 = InlineKeyboardMarkup()
        l = await message.answer(f'üõíüõíüõíüõíüõíüõíüõíüõíüõíüõíüõíüõíüõíüõíüõíüõí\n'
                                 f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É üéâ{info[1]}\n'
                                 '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n')
        v.append(l.message_id)
        t = info[2:]
        c = 0
        k = 0
        for i in range(int(len(t) / 3)):
            keyboard9.add(InlineKeyboardButton(f'{i + 1} ) {t[c]}', callback_data=f"300{i}"))
            keyboard9.add(InlineKeyboardButton(f'-', callback_data=f"201{i}"),
                          InlineKeyboardButton(f'–£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä', callback_data=f"204{i}"),
                          InlineKeyboardButton(f'+', callback_data=f"203{i}"))
            l = await message.answer(f'üîπ {t[c]} 1 ‚Äî {t[c + 1]}\n'
                                     f'‚îî {t[c + 2]} x {t[c + 1]}={t[c + 2] * t[c + 1]}‚ÇΩ \n', reply_markup=keyboard7)
            v.append(l.message_id)
            k += t[c + 2] * t[c + 1]
            c += 3
        keyboard9.add(InlineKeyboardButton('–û—Ç—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data=f"300"))
        l = await message.answer(f'–ò—Ç–æ–≥: üéâ{k}‚ÇΩ\n', reply_markup=keyboard9)
        v.append(l.message_id)


@dp.callback_query_handler(text_contains='20')
async def basket_product_edit(call: CallbackQuery):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ    """
    s = str(call['data'].replace('20', ''))
    if int(s[0]) == 1:
        info[(3 * int(s[1]) + 1) + 3] = info[(3 * int(s[1]) + 1) + 3] - 1
        if int(info[(3 * int(s[1]) + 1) + 3]) == 0:
            info.pop((3 * int(s[1]) + 1) + 1)
            info.pop((3 * int(s[1]) + 1) + 1)
            info.pop((3 * int(s[1]) + 1) + 1)
    if int(s[0]) == 4:
        info.pop((3 * int(s[1]) + 1) + 1)
        info.pop((3 * int(s[1]) + 1) + 1)
        info.pop((3 * int(s[1]) + 1) + 1)
    if int(s[0]) == 3:
        info[(3 * int(s[1]) + 1) + 3] = info[(3 * int(s[1]) + 1) + 3] + 1
    for i in v:
        await bot.delete_message(info[0], i)
    await basket(message=call.message)


@dp.callback_query_handler(text_contains='300')
async def basket_product_delete(call: CallbackQuery):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã    """
    global info
    info = info[0:2]
    await basket(message=call.message)


@dp.message_handler(Text(equals=['–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚úÖ']))
async def send_manager(message: Message):
    """"   –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–∫–∞–∑–µ   """
    global info
    await bot.send_message(manager, info)
    await list_add(info)
    info = info[:2]
    await message.answer('C–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!'
                         '–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É:+7 (3822) 33‚Äí10‚Äí00', reply_markup=None)


@dp.message_handler(Text(equals=['–ú–æ–∏ –∑–∞–∫–∞–∑—ãüìú']))
async def orders_list(message: Message):
    """"   –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è   """
    l = await list_take_orders(info[0])
    keyboard4 = InlineKeyboardMarkup()
    n = 0
    for i in l:
        i = i[:4] + '-' + i[4:6] + '-' + i[6:8] + ' ' + i[8:10] + ':' + i[10:12]
        keyboard4.add(InlineKeyboardButton(f'–ó–∞–∫–∞–∑ –æ—Ç {i}', callback_data=f"40t{n}"))
        n += 1
    await message.answer('–í–∞—à–∏ –∑–∞–∫–∞–∑—ã', reply_markup=keyboard4)


@dp.callback_query_handler(text_contains='40t')
async def take_order(call: CallbackQuery):
    """"   –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ä–∑–∏–Ω—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞   """
    global info
    s = str(call['data'].replace('40t', ''))
    l = await list_take_orders(info[0])
    date = l[int(s)]
    info = await list_take(date, info[0])
    q = info[:2]
    t = info[2]
    t = t.split()
    for i in range(0, len(t), 3):
        t[i + 1] = int(t[i + 1])
        t[i + 2] = int(t[i + 2])
    info = q + t
    await call.message.edit_reply_markup(reply_markup=None)
    await basket(message=call.message)


# send section
@dp.message_handler(Command('sendall'))
async def send_all(message: Message):
    """"   –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏   """
    if message.chat.id == int(admin_id):
        list_user_id = await user_id()
        for i in list_user_id:
            try:
                await bot.send_message(i, message.text[message.text.find(' '):])
            except:
                pass
        await message.answer('Done')
    else:
        await message.answer('Error')


@dp.message_handler(Command('sendallwp'))
async def send_allwp(message: Message):
    """"   –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–æ—Ç–æ   """
    if message.chat.id == int(admin_id):
        list_user_id = await user_id()
        for i in list_user_id:
            try:
                await bot.send_photo(i, open('photo.jpg', 'rb'), message.text[message.text.find(' '):])
            except:
                pass
        await message.answer('Done')
    else:
        await message.answer('Error')


async def basket_cleaning(list1):
    """"   –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–∏—Å—Ç–∫–∏ –∫–æ–∑—Ä–∑–∏–Ω—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞   """
    if len(list1[2:]) % 3 == 0 and type(list1[-2]) == int:
        return list1
    t = list1[2:]
    k = list1[:2]
    for i in range(len(list1)):
        try:
            if type(t[int((i + 1) * 3) - 1]) == str:
                t.pop(i * 3)
                t.pop(i * 3)
                break
        except IndexError:
            t.pop(i * 3)
            t.pop(i * 3)
            break
    list1 = k + t
    if len(list1[2:]) % 3 == 0 and type(list1[-2]) == int:
        return list1
    else:
        return basket_cleaning(list1)


@dp.message_handler(Text(equals=['shopingbasket']))
async def info_admin(message: Message):
    """ –§—É–Ω–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ """
    print(info, type(info))


@dp.message_handler()
async def NLO(message: Message):
    """"   –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è    """
    await message.answer('–Ø –µ—â—ë –º–æ–ª–æ–¥–æ–π –±–æ—Ç,—è –Ω–µ –º–æ–≥—É —Ä–µ—à–∞—Ç—å —Ç–∞–∫–∏–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n'
                         ' –ù–æ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥ –Ω–µ–π –ø–æ–¥—É–º–∞—é!\nü§îü§îü§îü§î')
